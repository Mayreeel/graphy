plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'

    // QueryDSL
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    // rest-docs
    id 'org.asciidoctor.jvm.convert' version "3.3.2"

    // sonarqube
    id 'org.sonarqube' version "3.3"
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/xml/jacoco.xml")
        html.destination file("${buildDir}/jacoco/html")
    }
    dependsOn test
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "src/test/java/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/jacoco/xml/jacoco.xml"
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.login', '${project.login}'
    }
}
tasks.sonarqube.dependsOn test

group = 'com.graphy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    // QueryDSL
    querydsl.extendsFrom compileClasspath

    // rest-docs
    asciidoctorExtensions
}


repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

// jacoco
jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS' // role을 체크하는 단위

            limit {
                counter = 'BRANCH' // 브랜치를 기준으로
                value = 'COVEREDRATIO' // 커버리지가
                minimum = 0
//                minimum = 0.90 // 최소 90% 이상이 되면 합
            }
        }
    }
}

dependencies {

    // spring-boot
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'junit:junit:4.13.2'

    // lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:5.0.0"
    implementation "com.querydsl:querydsl-apt:5.0.0"

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //rest-docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'
}

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}


tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()

    // test 실행 마다 jacocoTestReport 실행
    finalizedBy 'jacocoTestReport'

    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

// jacocoTestReport와 jacocoTestCoverageVerification를 묶어서 실행
task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}
